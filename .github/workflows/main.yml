name: Build, test, and release

on:
  push:
    branches: '*'
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      # TODO: Replace this action with something that isn't deprecated
      - name: Create release
        id: create_release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        with:
          draft: false
          prerelease: false
          release_name: r${{ github.run_number }}
          tag_name: build/${{ github.run_number }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

  build:
    needs: create-release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target:
          - i686-unknown-linux-gnu
          - i686-pc-windows-gnu
          - aarch64-unknown-linux-gnu

          # https://github.com/cross-rs/cross-toolchains#apple-targets
          # - x86_64-apple-darwin
          # - aarch64-apple-darwin

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install rustup
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

      - name: Install cross
        run: cargo install -f cross

      - name: Run tests
        run: cross test

      - name: Build release executable
        run: cross build --target ${{ matrix.target }} --release

      # - name: Build debug executable
      #   run: cross build --target ${{ matrix.target }}

      - name: Build release package
        run: |
          export SUFFIX=$(echo '${{ matrix.target }}' |grep -q '\-windows-' && echo '.exe')
          export ARCH=$(echo '${{ matrix.target }}' |cut -d - -f 1)
          export OS=$(echo '${{ matrix.target }}' |cut -d - -f 3)
          export RELEASE=portr-${OS}-${ARCH}-r${{ github.run_number }}
          export BIN=target/${{ matrix.target }}/release/portr${SUFFIX}
          ls -l $BIN || exit 1
          mkdir $RELEASE || exit 1
          cp $BIN $RELEASE/ || exit 1
          cp LICENSE README.md portr.toml.example $RELEASE/ || exit 1
          ls -l $RELEASE/* || exit 1
          zip -r ${RELEASE}.zip $RELEASE/ || exit 1

      - name: List packages
        run: ls -lh *.zip

      - name: upload artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: portr-*.zip
          # asset_name: docker-dev.sh
          asset_content_type: application/zip
